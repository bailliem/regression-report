# Univariate distribution checks

This section reports a series of univariate summary checks of the bacteremia dataset.

```{r, message =FALSE, warning =FALSE , echo=FALSE}
library(here)
library(tidyverse)
library(Hmisc)
source(here("R", "ida_plot_univar.R"))  ## function to plot univariate summaries. 
source(here("R", "ida_plot_univar_orig_vs_trans.R"))  ## function for side-by-side comparison of original vs. transformed scale, calls ida_plot_univar.R
source(here("R", "ida_trans.R"))  ## function to determine transformation (log(x+c) or identity). 

## Load the dataset.
load(here::here("data", "bact_env_b.rda"))

```

## Data set overview

Using the [Hmisc](https://cran.r-project.org/web/packages/Hmisc/) describe function, we provide an overview of the univariate distributions of all predictors in the data set. The descriptive report also provides histograms of continuous variables. For ease of scanning the information, we group the report by the predictor sets.

@Mark in the IDA plan we also have SD, and skewness and curtosis, which are not output by describe. Should we generate our own table with the requested statistics according to the IDA plan?


### Outcome variable

```{r desc_b_bact_1, message = FALSE, results='asis', warning=FALSE, , echo=FALSE}
b_bact %>%
  dplyr::select(BloodCulture, BC) %>%
  Hmisc::describe(descript = "Outcome variable") %>%
  Hmisc::html(size = 80)
```


### Structural variables




```{r desc_b_bact_1, message = FALSE, results='asis', warning=FALSE, , echo=FALSE}
b_bact %>%
  dplyr::select(all_of(structural_vars)) %>%
  Hmisc::describe(descript = "Structural variables") %>%
  Hmisc::html(size = 80)
```

### Key predictors

```{r desc_b_bact_2, message = FALSE, results='asis', warning=FALSE, , echo=FALSE}
b_bact %>%
  dplyr::select(all_of(c(key_predictors))) %>%
  Hmisc::describe(descript = "ey predictors") %>%
  Hmisc::html(size = 80)
```

### Predictors of medium importance

```{r desc_b_bact_3, message = FALSE, results='asis', warning=FALSE, echo=FALSE}
b_bact %>%
  dplyr::select(all_of(c(medimp_predictors))) %>%
  Hmisc::describe(descript = "Predictors of medium importance") %>%
  Hmisc::html(size = 80)
```

### All other predictors

```{r desc_b_bact_4, message = FALSE, results='asis', warning=FALSE, echo=FALSE}
b_bact %>%
  dplyr::select(all_of(remaining_predictors)) %>%
  Hmisc::describe(descript = "Remaining predictors") %>%
  Hmisc::html(size = 80)
```


## Categorical variables

We now provide a closer visual examination of the categorical predictors.

```{r catplot, message=FALSE, warning =FALSE , echo=FALSE}
b_bact %>%
  dplyr::select(SEX, BC) %>%
  dplyr::mutate_all(forcats::as_factor) %>%   
  dplyr::mutate_all(forcats::fct_explicit_na, "NA") %>%
  tidyr::pivot_longer(
    dplyr::everything(),
    names_to = "var",
    values_to = "value",
    values_drop_na = FALSE
  ) %>%
  dplyr::group_by(var, value) %>%
  dplyr::summarize(N = n()) %>%
  dplyr::mutate(
    freq = N / sum(N),
    pct = round((freq * 100), 1),
    axis_lab = paste0(value, ' ', '(N = ', N, ')'),
    var_label = case_when(var == "SEX" ~ "Sex",
                          var == "BC" ~ "Bacteremia")
  ) %>%
  ggplot(aes(
    x = reorder(axis_lab, pct),
    y = pct,
    label = pct
  )) +
  geom_text(nudge_y = 7) +
  geom_pointrange(aes(ymin = 0, ymax = pct), alpha = 1, size = 1, color = "grey") +
  geom_point(color = "firebrick2",
             alpha = 0.6,
             size = 3) +
  ylab("Percentage (%)") +
  scale_y_continuous(limits = c(0, 100)) +
  labs(caption = "Number of subjects with a non-missing value reported in brackets.\nNA = missing") +
  facet_wrap(~ var_label, ncol = 1, scales = "free_y") +
  coord_flip() +
  theme_minimal(base_size = 12) +
  theme(axis.title.y = element_blank(),
        panel.grid.minor = element_blank())

```


## Continuous variables


### Univariate distribution with variables using only the original variable without the suggested transformations

```{r}
for(j in 1:length(unique.variables)){
  print(ida_plot_univar(b_bact, unique.variables[j], sigma=res[j], n_bars=100, transform = FALSE))
#  if(!is.na(res[j])){
#    print(ida_plot_univar(b_bact, paste("t_",variables[j],sep="")))
#  }
}
```

### Analysis of clumping

Here we report the number of distinct values, and the absolute and relative frequencies of the five most frequent values. We also compute a concentration ratio as the ratio of the frequency of the most frequent value and the mean frequency of each distinct value.

@Mark: Is it possible to include this in the Hmisc::describe() function? Can we e.g. save the concentration ratios and show an ordinal plot with them?

#### Structural variables

```{r}
for(predictor in structural_vars){
  cat("\n\n\nStructural variable: ", predictor, "\n\nDistinct values:\n", length(unique(b_bact[,predictor])),"\n\nMost frequent values:\n")
  print(head(- sort(-table(b_bact[,predictor])),5))
  cat("\nRelative frequencies:\n")
  print(round(head(- sort(-table(b_bact[,predictor])),5)/sum(!is.na(b_bact[,predictor])),3))
  cat("\nConcentration ratio:\n")
  print(head(- sort(-table(b_bact[,predictor])),1)/mean(table(b_bact[,predictor])))
}

```

#### Key predictors

```{r}
for(predictor in key_predictors){
  cat("\n\n\nPredictor: ", predictor, "\n\nDistinct values:\n", length(unique(b_bact[,predictor])),"\n\nMost frequent values:\n")
  print(head(- sort(-table(b_bact[,predictor])),5))
  cat("\nRelative frequencies:\n")
  print(round(head(- sort(-table(b_bact[,predictor])),5)/sum(!is.na(b_bact[,predictor])),3))
  cat("\nConcentration ratio:\n")
  print(head(- sort(-table(b_bact[,predictor])),1)/mean(table(b_bact[,predictor])))

}
```

#### Predictors of medium importance

```{r}
for(predictor in medimp_predictors){
  cat("\n\n\nPredictor: ", predictor, "\n\nDistinct values:\n", length(unique(b_bact[,predictor])),"\n\nMost frequent values:\n")
  print(head(- sort(-table(b_bact[,predictor])),5))
  cat("\nRelative frequencies:\n")
  print(round(head(- sort(-table(b_bact[,predictor])),5)/sum(!is.na(b_bact[,predictor])),3))
  cat("\nConcentration ratio:\n")
  print(head(- sort(-table(b_bact[,predictor])),1)/mean(table(b_bact[,predictor])))

}
```

#### Remaining predictors

```{r}
for(predictor in remaining_predictors){
  cat("\n\n\nPredictor: ", predictor, "\n\nDistinct values:\n", length(unique(b_bact[,predictor])),"\n\nMost frequent values:\n")
  print(head(- sort(-table(b_bact[,predictor])),5))
  cat("\nRelative frequencies:\n")
  print(round(head(- sort(-table(b_bact[,predictor])),5)/sum(!is.na(b_bact[,predictor])),3))
  cat("\nConcentration ratio:\n")
  print(head(- sort(-table(b_bact[,predictor])),1)/mean(table(b_bact[,predictor])))

}
```


### Suggested transformations

Next we investigate whether a transformation of continuous variables may improve any further analyses to reduce disproportional impact of highly influential points, also in multivariate summaries. We employ a function `ida_trans` for this purpose, which optimises the parameter `sigma` of the pseudo-logarithm for that purpose. The optimization targets the best possible linear correlation of the transformed values with normal deviates. If no better transformation can be found, or if the improvement in correlation is less than 0.2 correlation units, no transformation is suggested.

```{r}
variables<- c(structural_vars, key_predictors, medimp_predictors, remaining_predictors)
unique.variables <- unique(variables)

res<-sapply(unique.variables, function(X) ida_trans(b_bact[,X], equ.marg=0.2)$const) #takes long, calculate once, and save?
res
cat("Predictors where a transformation may symmetrize the distribution:\n")
cat("Number:     ", sum(!is.na(res)), "\n")
cat("Proportion: ", mean(!is.na(res)), "\n")
```

Register transformed variables in the data set:

```{r}
for(j in 1:length(unique.variables)){
  if(!is.na(res[j])){
    newname <- paste("t_",unique.variables[j],sep="")
    newlabel <- paste("pseudo-log of",label(b_bact)[unique.variables[j]])
    names(newlabel)<-newname
    x<-pseudo_log(b_bact[[unique.variables[j]]], sigma=res[j], base=10)
    label(x)<-newlabel
    b_bact[[newname]] <- x
    upData(b_bact, labels=newlabel)
  }
}

sigma_values <- res


c_bact <- b_bact

# update variable lists - generate a second list with transformed variables replacing the originals

bact_transformed <- bact_variables

for(j in 1:length(bact_variables)){
  for(jj in 1:length(bact_variables[[j]])){
      if(!is.na(res[bact_variables[[j]][jj]])) bact_transformed[[j]][jj] <- paste("t_", bact_variables[[j]][jj], sep="")
  }
}


```



### Comparison of univariate distributions with and without pseudo-log transformation

The comparison is only shown for variables where a transformation is suggested.

```{r, fig.width=12}
for(j in 1:length(unique.variables)){
#  print(ida_plot_univar_orig_vs_trans(b_bact, unique.variables[j], sigma=res[j], n_bars=100))
 if(!is.na(res[j])){
   print(ida_plot_univar_orig_vs_trans(b_bact, unique.variables[j], sigma=res[j], n_bars=100))
 }
}
```

```{r}
save(list=c("c_bact", "bact_variables", "sigma_values", "bact_transformed"), 
     file=here::here("data", "bact_env_c.rda"))
```



## Section session info

```{r, warning=FALSE, message=FALSE, echo=FALSE}
sessionInfo()
```
