# Univariate distribution checks

This section reports a series of univariate summary checks of the bacteremia dataset.

```{r, message =FALSE, warning =FALSE , echo=FALSE}
library(here)
library(tidyverse)
library(Hmisc)
library(e1071)   # ADD for skewness and kurtosis
source(here("R", "ida_plot_univar.R"))  ## function to plot univariate summaries. 
source(here("R", "ida_plot_univar_orig_vs_trans.R"))  ## function for side-by-side comparison of original vs. transformed scale, calls ida_plot_univar.R
source(here("R", "ida_trans.R"))  ## function to determine transformation (pseudolog(x, sigma) or identity). 

## Load the dataset.
load(here::here("data", "bact_env_b.rda"))

```


## U1: Categorical variables

SEX and BC (bactermia status) are described by frequencies and proportions in each category.

```{r catplot, message=FALSE, warning =FALSE , echo=FALSE}
b_bact %>%
  dplyr::select(SEX, BC) %>%
  dplyr::mutate_all(forcats::as_factor) %>%   
  dplyr::mutate_all(forcats::fct_explicit_na, "NA") %>%
  tidyr::pivot_longer(
    dplyr::everything(),
    names_to = "var",
    values_to = "value",
    values_drop_na = FALSE
  ) %>%
  dplyr::group_by(var, value) %>%
  dplyr::summarize(N = n()) %>%
  dplyr::mutate(
    freq = N / sum(N),
    pct = round((freq * 100), 1),
    axis_lab = paste0(value, ' ', '(N = ', N, ')'),
    var_label = case_when(var == "SEX" ~ "Sex",
                          var == "BC" ~ "Bacteremia")
  ) %>%
  ggplot(aes(
    x = reorder(axis_lab, pct),
    y = pct,
    label = pct
  )) +
  geom_text(nudge_y = 7) +
  geom_pointrange(aes(ymin = 0, ymax = pct), alpha = 1, size = 1, color = "grey") +
  geom_point(color = "firebrick2",
             alpha = 0.6,
             size = 3) +
  ylab("Percentage (%)") +
  scale_y_continuous(limits = c(0, 100)) +
  labs(caption = "Number of subjects with a non-missing value reported in brackets.\nNA = missing") +
  facet_wrap(~ var_label, ncol = 1, scales = "free_y") +
  coord_flip() +
  theme_minimal(base_size = 12) +
  theme(axis.title.y = element_blank(),
        panel.grid.minor = element_blank())

```


## Continuous variables


### U2: Univariate distributions of continuous variables

#### U2: Structural variables

The only structural continuous variables is AGE. This variable is also a key predictor (see below).


#### U2: Key predictors


```{r}
unique.variables <- key_predictors
for(j in 1:length(unique.variables)){
  print(ida_plot_univar(b_bact, unique.variables[j], sigma=NA, n_bars=100, transform = FALSE))
}
```

#### U2: Predictors of medium importance

```{r}
unique.variables <- unique(medimp_predictors)
for(j in 1:length(unique.variables)){
  print(ida_plot_univar(b_bact, unique.variables[j], sigma=NA, n_bars=100, transform = FALSE))
}
```

#### U2: Remaining predictors

```{r}
unique.variables <- unique(remaining_predictors)
for(j in 1:length(unique.variables)){
  print(ida_plot_univar(b_bact, unique.variables[j], sigma=NA, n_bars=100, transform = FALSE))
}
```

### Numerical summaries

COMMENT @Mark is there a way to make nicer looking tables out of the numerical summaries??

#### Key predictors

```{r}
unique.variables <- unique(key_predictors)
for(j in 1:length(unique.variables)){
  cat("Numerical summary of ", unique.variables[j],"(",label(b_bact[,unique.variables[j]]), "[", units(b_bact[,unique.variables[j]]), "]):\n\n")
  print(main_descriptives(b_bact[,unique.variables[j]]))
}
```



#### Predictors of medium importance

```{r}
unique.variables <- unique(medimp_predictors)
for(j in 1:length(unique.variables)){
  cat("Numerical summary of ", unique.variables[j],"(",label(b_bact[,unique.variables[j]]), "[", units(b_bact[,unique.variables[j]]), "]):\n\n")
  print(main_descriptives(b_bact[,unique.variables[j]]))
}
```

#### Remaining predictors

```{r}
unique.variables <- unique(remaining_predictors)
for(j in 1:length(unique.variables)){
  cat("Numerical summary of ", unique.variables[j],"(",label(b_bact[,unique.variables[j]]), "[", units(b_bact[,unique.variables[j]]), "]):\n\n")
  print(main_descriptives(b_bact[,unique.variables[j]]))
}
```



### Suggested transformations

Next we investigate whether a pseudolog transformation of continuous variables may substantially symmetrize the univariate distributions of the continuous variables, and may hence be useful for multivariate summaries.  We employ a function `ida_trans` for this purpose, which optimises the parameter `sigma` of the pseudo-logarithm for that purpose. The optimization targets the best possible linear correlation of the transformed values with normal deviates. If no better transformation can be found, or if the improvement in correlation is less than 0.2 correlation units, no transformation is suggested.

```{r}
variables<- c(structural_vars, key_predictors, medimp_predictors, remaining_predictors)
unique.variables <- unique(variables)

res<-sapply(unique.variables, function(X) ida_trans(b_bact[,X], equ.marg=0.2)$const) #takes long, calculate once, and save?
res
cat("Predictors where a transformation may symmetrize the distribution:\n")
cat("Number:     ", sum(!is.na(res)), "\n")
cat("Proportion: ", mean(!is.na(res)), "\n")
```

Register transformed variables in the data set:

```{r}
for(j in 1:length(unique.variables)){
  if(!is.na(res[j])){
    newname <- paste("t_",unique.variables[j],sep="")
    newlabel <- paste("pseudo-log of",label(b_bact)[unique.variables[j]])
    names(newlabel)<-newname
    x<-pseudo_log(b_bact[[unique.variables[j]]], sigma=res[j], base=10)
    label(x)<-newlabel
    b_bact[[newname]] <- x
    upData(b_bact, labels=newlabel)
  }
}

sigma_values <- res


c_bact <- b_bact

# update variable lists - generate a second list with transformed variables replacing the originals

bact_transformed <- bact_variables

for(j in 1:length(bact_variables)){
  for(jj in 1:length(bact_variables[[j]])){
      if(!is.na(res[bact_variables[[j]][jj]])) bact_transformed[[j]][jj] <- paste("t_", bact_variables[[j]][jj], sep="")
  }
}


```



### Comparison of univariate distributions with and without pseudo-log transformation

The comparison is only shown for variables where a transformation is suggested.

```{r, fig.width=12}
for(j in 1:length(unique.variables)){
#  print(ida_plot_univar_orig_vs_trans(b_bact, unique.variables[j], sigma=res[j], n_bars=100))
 if(!is.na(sigma_values[j])){
   print(ida_plot_univar_orig_vs_trans(c_bact, unique.variables[j], sigma=sigma_values[j], n_bars=100))
 }
}

## COMMENT @Mark we must pick two from these plots for the paper - the old version has BUN which is now no longer transformed (as we raised the threshold for indicating relevance of a  pseudolog transformation) I would suggest ASAT and GGT. Can you please produce a TIF plot for these two (similar to what we already have in the paper?)
```

```{r}
save(list=c("c_bact", "bact_variables", "sigma_values", "bact_transformed"), 
     file=here::here("data", "bact_env_c.rda"))
```



## Section session info

```{r, warning=FALSE, message=FALSE, echo=FALSE}
sessionInfo()
```
